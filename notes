binaries -

egen - randomly generate an election
    stdin = optional csv with input (will not generate)

    flags
    -cand=3: Number of candidates in election
    -cond=false: Force condorcet winner
    -fix=false: Use fixed random seed
    -peak=false: Force generation with peak preference
    -pref=false: Force preference of some candidate
    -rand=false: Use a random vote/cand count
    -vote=6: Number of voters in election

    stdout: vote matrix json
    {
        "votes":
        [
            {
                "peak": 0,
                "vote": {
                    "0": 0
                    "1": 2,
                    "2": 1,
                }
            },
            {
                ...
            },
        ],

        "peak": true,
        "pref": {
            "b": 1,
            "a": 2
        }
        "rank": [ 4, 3, 5, 0, 0, 0 ],
        "condorcet": 2,
        "candidates": 3
    }

tally - tallies election results
    flags
    - o = [string: slater, kemeny, bucklin, second order copeland, STV, borda, all] default: all. Election tally types
    slater = minimum lines swapped
    kemeny = minimum weight swapped

    - sample json output
    {
        "names": {
            "0": "Alex"
            "1": "Bart",
            "2": "Cindy",
            "3": "David",
            "4": "Erik",
            "5": "Frank",
            "6": "Greg",
        },
        "results": {
            "slater": [ 0, 3, 4, 1, 5, 2, 6 ],
            "kemeny": [ 4, 0, 3, 5, 2, 1, 6 ]
        }
    }
    - sample csv output
        rank,slater,kemeny
        1,Alex,Erik
        2,David,Alex
        3,Erik,David
        4,Bart,Frank
        5,Frank,Cindy
        6,Cindy,Bart
        7,Greg,Greg

graph - majority graph of election
    stdin = newline separated election results (json)

    flags
    - o = [string] (json, dot)

    - sample dot output
        digraph G {
            Alex -> Greg [label="12"];
            Alex -> Bart [label="6"];
            Alex -> Cindy [label="6"];
            ...
        }

    - sample json output
    {
        "nodes": {
            "6": {},
            "5": {
                "edges": {
                    "6": 18,
                    "2": 6
                }
            },
            "4": {
                "edges": {
                    "6": 18,
                    ...
                }
            },
            ....
        }
    }

possible binaries for part II
    -compare results
    -condorcet winner is not the winner
    -remove (irrelevant?) candidate from election
    -find manipulation
    -find single peaked preferences
